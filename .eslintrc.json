{
  "env": {
    "browser": true,
    "es2021": true
  },
  "extends": [
    "react-app",
    "react-app/jest",
    "plugin:import/recommended",
    "plugin:eslint-comments/recommended",
    "plugin:you-dont-need-lodash-underscore/compatible",
    "plugin:react/recommended",
    "airbnb",
    "plugin:unicorn/recommended"
  ],
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": [
    "react",
    "simple-import-sort"
  ],
  "rules": {
    "linebreak-style": 0,
    "import/first": "warn",
    "import/newline-after-import": "warn",
    "import/no-duplicates": "warn",
    "simple-import-sort/imports": [
      "warn",
      {
        "groups": [
          [
            "^\\u0000"
          ],
          [
            "^@?\\w",
            "^@?\\w.*\\u0000$"
          ],
          [
            "(?<!\\u0000)$",
            "(?<=\\u0000)$"
          ],
          [
            "^\\.",
            "^\\..*\\u0000$"
          ]
        ]
      }
    ],
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],
    "simple-import-sort/exports": "warn",
    "function-paren-newline": "off",
    "unicorn/no-useless-undefined": "off",
    "max-len": [
      "warn",
      {
        "code": 100,
        "tabWidth": 2,
        "ignorePattern": "(\/\/ eslint-disable-next-line|\/* eslint-(enable|disable))",
        "ignoreStrings": true,
        "ignoreUrls": true,
        "ignoreTemplateLiterals": true,
        "ignoreRegExpLiterals": true
      }
    ],
    "unicorn/filename-case": [
      "error",
      {
        "cases": {
          "pascalCase": true,
          "camelCase": true
        }
      }
    ],
    "unicorn/empty-brace-spaces": [
      "off"
    ],
    "react/jsx-indent": [
      "warn",
      2
    ],
    "no-param-reassign": [
      "error",
      {
        "ignorePropertyModificationsForRegex": [
          "^self$"
        ]
      }
    ]
  }
}